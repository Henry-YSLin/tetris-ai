{
  "env": {
    "browser": true,
    "node": true
  },

  "parser": "@typescript-eslint/parser", // Specifies the ESLint parser
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module", // Allows for the use of imports
    "ecmaFeatures": {
      "jsx": true // Allows for the parsing of JSX
    },
    "project": "./tsconfig.eslint.json"
  },
  "settings": {
    "react": {
      "version": "detect" // Tells eslint-plugin-react to automatically detect the version of React to use
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.eslint.json"
      }
    }
  },
  "plugins": ["@typescript-eslint", "import", "prettier"],
  "extends": ["eslint:recommended", "plugin:@typescript-eslint/recommended", "airbnb", "airbnb-typescript", "prettier"],

  "overrides": [
    {
      "files": ["*.*"],
      "excludedFiles": "src/**/*.*",
      "rules": {
        "import/no-extraneous-dependencies": "off",
        "global-require": "off"
      }
    }
  ],

  "rules": {
    // "indent": "off",
    // "@typescript-eslint/indent": [
    //   "warn",
    //   { "MemberExpression": 2, "VariableDeclarator": "first" }
    // ],
    "semi": "off",
    "@typescript-eslint/semi": ["error", "always"],
    "quotes": ["warn", "single"],
    "no-console": ["warn", { "allow": ["warn", "error"] }],
    "consistent-return": "off",
    "func-names": "off",
    "no-param-reassign": "off",
    "no-return-await": "off",
    "no-trailing-spaces": "warn",
    "arrow-spacing": "warn",
    "comma-spacing": "warn",
    "no-underscore-dangle": "off",
    "no-warning-comments": ["warn", { "terms": ["todo", "debug", "note"], "location": "start" }],
    "class-methods-use-this": "off",
    "comma-dangle": "off",
    "@typescript-eslint/no-var-requires": "off",
    "prefer-destructuring": ["warn", { "object": true, "array": false }],
    "no-unused-vars": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      { "varsIgnorePattern": "^_", "args": "none", "caughtErrors": "all", "caughtErrorsIgnorePattern": "^_" }
    ],
    "@typescript-eslint/no-empty-interface": "off",
    "prefer-template": "warn",
    "object-curly-spacing": ["warn", "always"],
    "space-infix-ops": "warn",
    "no-plusplus": "off",
    "@typescript-eslint/explicit-member-accessibility": "error",
    "react/destructuring-assignment": "off",
    "react/no-unused-class-component-methods": "off",
    "react/sort-comp": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/naming-convention": [
      "warn",
      { "format": ["UPPER_CASE", "PascalCase"], "selector": "variable", "modifiers": ["global", "const"] },
      { "format": ["camelCase"], "selector": ["variable", "parameter"], "leadingUnderscore": "allow" },
      {
        "format": ["camelCase"],
        "selector": ["function", "classMethod", "accessor", "parameterProperty", "classProperty"]
      },
      {
        "format": ["camelCase"],
        "selector": ["objectLiteralMethod", "objectLiteralProperty"],
        "filter": {
          "regex": "^\\d+$",
          "match": false
        }
      },
      {
        "format": ["PascalCase"],
        "selector": ["classMethod", "accessor", "parameterProperty"],
        "modifiers": ["public"]
      },
      {
        "format": ["PascalCase", "camelCase"], // workaround for https://github.com/typescript-eslint/typescript-eslint/issues/6258
        "selector": ["classProperty"],
        "modifiers": ["public"]
      },
      {
        "format": ["PascalCase"],
        "selector": ["enumMember", "class", "interface", "typeAlias", "enum", "typeParameter"]
      },
      { "format": ["PascalCase"], "selector": "function", "modifiers": ["global"] },
      { "format": ["PascalCase"], "selector": "function", "modifiers": ["exported"] },
      { "format": ["camelCase", "PascalCase"], "selector": ["typeMethod", "typeProperty"] },
      {
        "format": ["PascalCase"],
        "selector": [
          "classMethod",
          "accessor",
          "parameterProperty",
          "classProperty",
          "enumMember",
          "class",
          "interface",
          "typeAlias",
          "enum",
          "typeParameter",
          "function",
          "typeMethod",
          "typeProperty"
        ],
        "filter": {
          "regex": "^(p|P)5",
          "match": true
        },
        "prefix": ["p5"]
      }
    ]
  }
}
